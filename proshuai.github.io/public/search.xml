<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[ESlint standard]]></title>
      <url>%2F2017%2F06%2F29%2FESlint-standard%2F</url>
      <content type="text"><![CDATA[规则使用两个空格缩进eslint: indent123function hello (name) &#123; console.log('hi', name)&#125; 字符串使用单引号eslint: quotes12console.log('hello there')$("&lt;div class='box'&gt;") 禁止出现未使用过的变量eslint: no-unused-vars123function myFunction () &#123; var result = something() // ✗ avoid&#125; 关键字后使用空格eslint: keyword-spacing12if (condition) &#123; ... &#125; // ✓ okif(condition) &#123; ... &#125; // ✗ avoid 在function的左括号之前使用一致的空格eslint: space-before-function-paren12345function name (arg) &#123; ... &#125; // ✓ okfunction name(arg) &#123; ... &#125; // ✗ avoidrun(function () &#123; ... &#125;) // ✓ okrun(function() &#123; ... &#125;) // ✗ avoid 要求使用 === 和 !==此外： obj == null 被允许检查 null || undefinedeslint: eqeqeq12345if (name === 'John') // ✓ okif (name == 'John') // ✗ avoidif (name !== 'John') // ✓ okif (name != 'John') // ✗ avoid 要求操作符周围有空格eslint: space-infix-ops1234567// ✓ okvar x = 2var message = 'hello, ' + name + '!'// ✗ avoidvar x=2var message = 'hello, '+name+'!' 强制在逗号后使用一致的空格eslint: comma-spacing1234567// ✓ okvar list = [1, 2, 3, 4]function greet (name, options) &#123; ... &#125;// ✗ avoidvar list = [1,2,3,4]function greet (name,options) &#123; ... &#125; 强制在代码块中使用一致的大括号风格eslint: brace-style1234567891011121314// ✓ okif (condition) &#123; // ...&#125; else &#123; // ...&#125;// ✗ avoidif (condition) &#123; // ...&#125;else &#123; // ...&#125; 强制所有控制语句使用一致的括号风格eslint: curly1234567891011// ✓ okif (options.quiet !== true) console.log('done')// ✓ okif (options.quiet !== true) &#123; console.log('done')&#125;// ✗ avoidif (options.quiet !== true) console.log('done') 要求回调函数中有容错处理eslint: handle-callback-err12345678910// ✓ okrun(function (err) &#123; if (err) throw err window.alert('done')&#125;)// ✗ avoidrun(function (err) &#123; window.alert('done')&#125;) 始终使用window.全局作为前缀eslint: no-undef1window.alert('hi') // ✓ ok 禁止出现多行空行eslint: no-multiple-empty-lines12345678// ✓ ok var value = 'hello world' console.log(value) // ✗ avoid var value = 'hello world' console.log(value) 强制操作符使用一致的换行符eslint: operator-linebreak123456789101112// ✓ okvar location = env.development ? 'localhost' : 'www.api.com'// ✓ okvar location = env.development ? 'localhost' : 'www.api.com'// ✗ avoidvar location = env.development ? 'localhost' : 'www.api.com' 变量声明要分开声明eslint: one-var12345678910// ✓ okvar silent = truevar verbose = true// ✗ avoidvar silent = true, verbose = true// ✗ avoidvar silent = true, verbose = true 用附加的括号包含条件赋值。 这使得这个赋值（=）表达式有意，而不是一个等于（===）的拼写错误。eslint: no-cond-assign123456789// ✓ okwhile ((m = text.match(expr))) &#123; // ...&#125;// ✗ avoidwhile (m = text.match(expr)) &#123; // ...&#125; 强制在单行代码块中使用一致的空格eslint: block-spacing12function foo () &#123;return true&#125; // ✗ avoidfunction foo () &#123; return true &#125; // ✓ ok 使用驼峰命名变量和方法名eslint: camelcase12345function my_function () &#123; &#125; // ✗ avoidfunction myFunction () &#123; &#125; // ✓ okvar my_var = 'hello' // ✗ avoidvar myVar = 'hello' // ✓ ok 禁止拖尾逗号eslint: comma-dangle123var obj = &#123; message: 'hello', // ✗ avoid&#125; 强制使用一致的逗号风格eslint: comma-style123456789var obj = &#123; foo: 'foo' ,bar: 'bar' // ✗ avoid &#125; var obj = &#123; foo: 'foo', bar: 'bar' // ✓ ok &#125; 点号之前换行(点号应该和属性在一行)eslint: dot-location12345console. log('hello') // ✗ avoid console .log('hello') // ✓ ok 文件必须以换行符结尾。eslint: eol-last 在功能表示符和其调用之间不能有空格(No space between function identifiers and their invocations.)eslint: func-call-spacing12console.log ('hello') // ✗ avoidconsole.log('hello') // ✓ ok 强制在对象字面量的属性中键和值之间使用一致的间距eslint: key-spacing1234var obj = &#123; 'key' : 'value' &#125; // ✗ avoidvar obj = &#123; 'key' :'value' &#125; // ✗ avoidvar obj = &#123; 'key':'value' &#125; // ✗ avoidvar obj = &#123; 'key': 'value' &#125; // ✓ ok 要求构造函数首字母大写eslint: new-cap12345function animal () &#123;&#125;var dog = new animal() // ✗ avoidfunction Animal () &#123;&#125;var dog = new Animal() // ✓ ok 要求调用无参构造函数时有圆括号eslint: new-parens123function Animal () &#123;&#125;var dog = new Animal // ✗ avoidvar dog = new Animal() // ✓ ok 强制 getter 和 setter 在对象中成对出现eslint: accessor-pairs1234567891011121314var person = &#123; set name (value) &#123; // ✗ avoid this.name = value &#125;&#125;var person = &#123; set name (value) &#123; this.name = value &#125;, get name () &#123; // ✓ ok return this.name &#125;&#125; 要求在构造函数中有 super() 的调用eslint: constructor-super1234567891011class Dog &#123; constructor () &#123; super() // ✗ avoid &#125;&#125;class Dog extends Mammal &#123; constructor () &#123; super() // ✓ ok &#125;&#125; 禁用 Array 构造函数eslint: no-array-constructor12var nums = new Array(1, 2, 3) // ✗ avoidvar nums = [1, 2, 3] // ✓ ok 禁用 arguments.caller 或 arguments.calleeeslint: no-caller1234567891011function foo (n) &#123; if (n &lt;= 0) return arguments.callee(n - 1) // ✗ avoid&#125;function foo (n) &#123; if (n &lt;= 0) return foo(n - 1)&#125; 禁止修改类声明的变量eslint: no-class-assign12class Dog &#123;&#125;Dog = 'Fido' // ✗ avoid 禁止修改 const 声明的变量eslint: no-const-assign12const score = 100score = 125 // ✗ avoid 禁止在条件中使用常量表达式(除了循环)eslint: no-constant-condition1234567891011if (false) &#123; // ✗ avoid // ...&#125;if (x === 0) &#123; // ✓ ok // ...&#125;while (true) &#123; // ✓ ok // ...&#125; 禁止在正则表达式中使用控制字符eslint: no-control-regex12var pattern = /\x1f/ // ✗ avoidvar pattern = /\x20/ // ✓ ok 禁用buggereslint: no-debugger1234function sum (a, b) &#123; debugger // ✗ avoid return a + b&#125; 禁止删除变量eslint: no-delete-var12var namedelete name // ✗ avoid 禁止 function 定义中出现重名参数eslint: no-dupe-args1234567function sum (a, b, a) &#123; // ✗ avoid // ...&#125;function sum (a, b, c) &#123; // ✓ ok // ...&#125; 禁止类成员中出现重复的名称eslint: no-dupe-class-members1234class Dog &#123; bark () &#123;&#125; bark () &#123;&#125; // ✗ avoid&#125; 禁止对象字面量中出现重复的 keyeslint: no-dupe-keys1234var user = &#123; name: 'Jane Doe', name: 'John Doe' // ✗ avoid&#125; 禁止出现重复的 case 标签eslint: no-duplicate-case12345switch (id) &#123; case 1: // ... case 1: // ✗ avoid&#125; 每个module 使用一个import的语句eslint: no-duplicate-imports1234import &#123; myFunc1 &#125; from 'module'import &#123; myFunc2 &#125; from 'module' // ✗ avoidimport &#123; myFunc1, myFunc2 &#125; from 'module' // ✓ ok 禁用eval()eslint: no-eval12eval( "var result = user." + propName ) // ✗ avoidvar result = user[propName] // ✓ ok 禁止对 catch 子句的参数重新赋值eslint: no-ex-assign1234567891011try &#123; // ...&#125; catch (e) &#123; e = 'new value' // ✗ avoid&#125;try &#123; // ...&#125; catch (e) &#123; const newVal = 'new value' // ✓ ok&#125; 禁止扩展原生类型eslint: no-extend-native1Object.prototype.age = 21 // ✗ avoid 禁止不必要的 .bind() 调用eslint: no-extra-bind1234567const name = function () &#123; getName()&#125;.bind(user) // ✗ avoidconst name = function () &#123; this.getName()&#125;.bind(user) // ✓ ok 禁止不必要的布尔转换eslint: no-extra-boolean-cast123456789const result = trueif (!!result) &#123; // ✗ avoid // ...&#125;const result = trueif (result) &#123; // ✓ ok // ...&#125; 禁止不必要的括号eslint: no-extra-parens12const myFunc = (function () &#123; &#125;) // ✗ avoidconst myFunc = function () &#123; &#125; // ✓ ok 使用break禁止 case 语句落空eslint: no-fallthrough12345678910111213141516171819202122switch (filter) &#123; case 1: doSomething() // ✗ avoid case 2: doSomethingElse()&#125;switch (filter) &#123; case 1: doSomething() break // ✓ ok case 2: doSomethingElse()&#125;switch (filter) &#123; case 1: doSomething() // fallthrough // ✓ ok case 2: doSomethingElse()&#125; 禁止数字字面量中使用前导和末尾小数点eslint: no-floating-decimal12const discount = .5 // ✗ avoidconst discount = 0.5 // ✓ ok 禁止对 function 声明重新赋值eslint: no-func-assign12function myFunc () &#123; &#125;myFunc = myOtherFunc // ✗ avoid 不能对只读的全局变量重新赋值eslint: no-global-assign1window = &#123;&#125; // ✗ avoid 禁止使用类似 eval() 的方法eslint: no-implied-eval12setTimeout("alert('Hello world')") // ✗ avoidsetTimeout(function () &#123; alert('Hello world') &#125;) // ✓ ok 禁止在嵌套的块中出现变量声明或 function 声明eslint: no-inner-declarations123if (authenticated) &#123; function setAuthUser () &#123;&#125; // ✗ avoid&#125; 禁止 RegExp 构造函数中存在无效的正则表达式字符串eslint: no-invalid-regexp12RegExp('[a-z') // ✗ avoidRegExp('[a-z]') // ✓ ok 禁止在字符串和注释之外不规则的空白eslint: no-irregular-whitespace1function myFunc () /*&lt;NBSP&gt;*/&#123;&#125; // ✗ avoid 禁用 iterator 属性eslint: no-iterator1Foo.prototype.__iterator__ = function () &#123;&#125; // ✗ avoid 不允许标签与变量同名eslint: no-label-var1234var score = 100function game () &#123; score: 50 // ✗ avoid&#125; 禁用标签语句eslint: no-labels1234label: while (true) &#123; break label // ✗ avoid &#125; 禁用不必要的嵌套块eslint: no-lone-blocks123456789function myFunc () &#123; &#123; // ✗ avoid myOtherFunc() &#125;&#125;function myFunc () &#123; myOtherFunc() // ✓ ok&#125; 禁止空格和 tab 的混合缩进eslint: no-mixed-spaces-and-tabs禁止使用多个空格eslint: no-multi-spaces12const id = 1234 // ✗ avoidconst id = 1234 // ✓ ok 禁止使用多行字符串eslint: no-multi-str12const message = 'Hello \ world' // ✗ avoid 禁止在非赋值或条件语句中使用 new 操作符eslint: no-new12new Character() // ✗ avoidconst character = new Character() // ✓ ok 禁止对 Function 对象使用 new 操作符eslint: no-new-func1var sum = new Function('a', 'b', 'return a + b') // ✗ avoid 禁用 Object 的构造函数eslint: no-new-object1let config = new Object() // ✗ avoid 禁止调用 require 时使用 new 操作符eslint: no-new-require1const myModule = new require('my-module') // ✗ avoid 禁止Symbol构造函数eslint: no-new-symbol1const foo = new Symbol('foo') // ✗ avoid 禁止原函数包装实例eslint: no-new-wrappers1const message = new String('hello') // ✗ avoid 禁止把全局对象作为函数调用eslint: no-obj-calls1const math = Math() // ✗ avoid 禁止在字符串中使用八进制转义序列eslint: no-octal-escape1const copyright = 'Copyright \251' // ✗ avoid 禁用八进制字面量eslint: no-octal12const num = 042 // ✗ avoidconst num = '042' // ✓ ok 禁止对 dirname 和 filename 进行字符串连接eslint: no-path-concat12const pathToFile = __dirname + '/app.js' // ✗ avoidconst pathToFile = path.join(__dirname, 'app.js') // ✓ ok 禁用 proto 属性eslint: no-proto12const foo = obj.__proto__ // ✗ avoidconst foo = Object.getPrototypeOf(obj) // ✓ ok 禁止多次声明同一变量eslint: no-redeclare12345let name = 'John'let name = 'Jane' // ✗ avoidlet name = 'John'name = 'Jane' // ✓ ok 禁止正则表达式字面量中出现多个空格eslint: no-regex-spaces1234const regexp = /test value/ // ✗ avoidconst regexp = /test &#123;3&#125;value/ // ✓ okconst regexp = /test value/ // ✓ ok 禁止在 return 语句中使用赋值语句eslint: no-return-assign1234567function sum (a, b) &#123; return result = a + b // ✗ avoid&#125;function sum (a, b) &#123; return (result = a + b) // ✓ ok&#125; 禁止自我赋值eslint : no-self-assign1name = name // ✗ avoid 禁止自身比较eslint: no-self-compare1if (score === score) &#123;&#125; // ✗ avoid 禁用逗号操作符eslint: no-sequences1if (doSomething(), !!test) &#123;&#125; // ✗ avoid 禁止覆盖受限制的标识符eslint: no-shadow-restricted-names1let undefined = 'value' // ✗ avoid 禁用稀疏数组eslint: no-sparse-arrays1let fruits = ['apple',, 'orange'] // ✗ avoid disallow tabs in fileeslint: no-tabs disallow template literal placeholder syntax in regular stringseslint: no-template-curly-in-string12const message = 'Hello $&#123;name&#125;' // ✗ avoidconst message = `Hello $&#123;name&#125;` // ✓ ok 禁止在构造函数中，在调用 super() 之前使用 this 或 supereslint: no-this-before-super123456class Dog extends Animal &#123; constructor () &#123; this.legs = 4 // ✗ avoid super() &#125;&#125; 禁止抛出异常字面量eslint: no-throw-literal12throw 'error' // ✗ avoidthrow new Error('error') // ✓ ok 禁用行尾空格eslint: no-trailing-spaces 禁止将变量初始化为 undefinedeslin: no-undef-init1234let name = undefined // ✗ avoidlet namename = 'value' // ✓ ok 禁用未修改的循环条件eslint: no-unmodified-loop-condition12for (let i = 0; i &lt; items.length; j++) &#123;...&#125; // ✗ avoidfor (let i = 0; i &lt; items.length; i++) &#123;...&#125; // ✓ ok 禁止可以在有更简单的可替代的表达式时使用三元操作符eslint: no-unneeded-ternary12let score = val ? val : 0 // ✗ avoidlet score = val || 0 // ✓ ok 禁止在return、throw、continue 和 break 语句之后出现不可达代码eslint: no-unreachable1234function doSomething () &#123; return true console.log('never called') // ✗ avoid&#125; 禁止在 finally 语句块中出现控制流语句eslint: no-unsafe-finally1234567try &#123; // ...&#125; catch (e) &#123; // ...&#125; finally &#123; return 42 // ✗ avoid&#125; disallow negating the left operand of relational operatorseslint: no-unsafe-negation1if (!key in obj) &#123;&#125; // ✗ avoid 禁止不必要的 .call() 和 .apply()1sum.call(null, 1, 2, 3) // ✗ avoid disallow unnecessary computed property keys in object literalseslint: no-useless-computed-key12const user = &#123; ['name']: 'John Doe' &#125; // ✗ avoidconst user = &#123; name: 'John Doe' &#125; // ✓ ok 禁用不必要的构造函数eslint: no-useless-constructor1234class Car &#123; constructor () &#123; // ✗ avoid &#125;&#125; 禁用不必要的转义字符eslint: no-useless-escape1let message = 'Hell\o' // ✗ avoid disallow renaming import, export, and destructured assignments to the same nameeslint: no-useless-rename12import &#123; config as config &#125; from './config' // ✗ avoidimport &#123; config &#125; from './config' // ✓ ok 禁用 with 语句eslint: no-with1with (val) &#123;...&#125; // ✗ avoid 保持一致性将对象的属性放在不同的行上eslint: object-property-newline1234567891011121314151617181920212223242526const user = &#123; name: 'Jane Doe', age: 30, username: 'jdoe86' // ✗ avoid&#125;const user = &#123; name: 'Jane Doe', age: 30, username: 'jdoe86' &#125; // ✓ okconst user = &#123; name: 'Jane Doe', age: 30, username: 'jdoe86'&#125;``` 禁止块内有空白填充eslint: padded-blocks``` javascriptif (user) &#123; // ✗ avoid const name = getName()&#125;if (user) &#123; const name = getName() // ✓ ok&#125; enforce spacing between rest and spread operators and their expressionseslint: rest-spread-spacing12fn(... args) // ✗ avoidfn(...args) // ✓ ok 强制分号前后有空格eslint: semi-spacing12for (let i = 0 ;i &lt; items.length ;i++) &#123;...&#125; // ✗ avoidfor (let i = 0; i &lt; items.length; i++) &#123;...&#125; // ✓ ok 强制在块之前使用一致的空格eslint:space-before-blocks12if (admin)&#123;...&#125; // ✗ avoidif (admin) &#123;...&#125; // ✓ ok 强制在圆括号内使用一致的空格eslint: space-in-parens12getName( name ) // ✗ avoidgetName(name) // ✓ ok 强制在一元操作符前后使用一致的空格eslint: space-unary-ops12typeof!admin // ✗ avoidtypeof !admin // ✓ ok 强制在注释中 // 或 /* 使用一致的空格eslint: spaced-comment12345//comment // ✗ avoid// comment // ✓ ok/*comment*/ // ✗ avoid/* comment */ // ✓ ok 要求或禁止模板字符串中的嵌入表达式周围空格的使用eslint: template-curly-spacing12const message = `Hello, $&#123; name &#125;` // ✗ avoidconst message = `Hello, $&#123;name&#125;` // ✓ ok 要求使用 isNaN() 检查 NaNeslint: use-isnan12if (price === NaN) &#123; &#125; // ✗ avoidif (isNaN(price)) &#123; &#125; // ✓ ok 强制 typeof 表达式与有效的字符串进行比较eslint: valid-typeof12typeof name === 'undefimed' // ✗ avoidtypeof name === 'undefined' // ✓ ok 要求 IIFE 使用括号括起来eslint: wrap-iife1234const getName = function () &#123; &#125;() // ✗ avoidconst getName = (function () &#123; &#125;()) // ✓ okconst getName = (function () &#123; &#125;)() // ✓ ok 强制在 yield 表达式中 周围使用空格eslint: yield-star-spacing12yield* increment() // ✗ avoidyield * increment() // ✓ ok 要求或禁止 “Yoda” 条件eslint: yoda12if (42 === age) &#123; &#125; // ✗ avoidif (age === 42) &#123; &#125; // ✓ ok 禁止出现令人困惑的多行表达式eslint: no-unexpected-multiline123456789101112131415161718192021// ✓ ok;(function () &#123; window.alert('ok')&#125;())// ✗ avoid(function () &#123; window.alert('ok')&#125;())// ✓ ok;[1, 2, 3].forEach(bar)// ✗ avoid[1, 2, 3].forEach(bar)// ✓ ok;`hello`.indexOf('o')// ✗ avoid`hello`.indexOf('o') 要求或禁止使用分号而不是 ASIeslint: semi12window.alert('hi') // ✓ okwindow.alert('hi'); // ✗ avoid 如果想要调过某个规则的校验，可以采用eslint-disabled。 参考资料：https://standardjs.com/readme-zhcn.htmlhttp://eslint.cn/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Object]]></title>
      <url>%2F2017%2F04%2F26%2FObject%2F</url>
      <content type="text"><![CDATA[构造函数，要创建新实例时，必须使用new操作符。此方式调用构造函数实际上将经历以下4个步骤：1、创建一个对象2、将构造函数的作用域赋给新对象（因此this就指向了这个新对象）3、执行构造函数中的代码（为这个新对象添加属性）4、返回新对象]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[matrix]]></title>
      <url>%2F2017%2F04%2F24%2Fmatrix%2F</url>
      <content type="text"><![CDATA[矩阵变换1234567891011121314function matrix(arr)&#123; var len = arr[0].length; var matrixArr = new Array(); for (var i = 0; i &lt; len; i++)&#123; matrixArr[i] = new Array(len); &#125; for(var j = 0; j&lt; arr.length; j++)&#123; for(var k = 0; k&lt; matrixArr[j].length; k++)&#123; matrixArr[k][j] = arr[j][k] &#125; &#125; return matrixArr;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[location]]></title>
      <url>%2F2017%2F04%2F24%2Flocation%2F</url>
      <content type="text"><![CDATA[‘location’是最有用的BOM对象之一，它提供了与当前窗口中加载的文档有关的信息，还有一些导航功能的信息。此外‘window.location’ 和 ‘document.location’引用的是同一个对象。下面列一下location对象的属性 location.hash返回URL中的hash(#号后跟零或多个字符)，如果URL中不包含散列，则返回空字符串 例如： #content location.host返回服务器名称和端口号（如果有） 例如： “www.17biu.cn:80” location.hostname返回不带端口号的服务器名称 例如： “www.17biu.cn” location.href返回当前价在页面的完整URL。而location对象的 ‘toString()’ 方法也返回这个值。 例如： “http://www.17biu.cn“ location.pathname返回URL中的目录和（或）文件名 例如： “/_post/“ location.port返回URL中指定的端口号。如果URL中不包含端口号，则这个属性返回空字符串 location.protocal返回页面使用的协议。通常是 ‘http:’ 或 ‘https:’ location.search返回URL的查询字符串。这个字符串以问号开头 例如：”?q=javascript” 查询字符串参数 下面这个函数可以解析查询字符串，然后返回包含所有参数的一个对象 12345678910111213141516171819function getQueryStringArgs() &#123; var qs = (location.search.length &gt; 0 ? location.search.substring(1) : ''), args = &#123;&#125;, vitems = qs.length ? qs.split("&amp;") : [], item = null, name = null, value = null, i = 0, len = items.length; for (var i = 0; i &lt; len; i++) &#123; item = items[i].split("="); name = decodeURIComponent(item[0]) value = decodeURIComponent(item[1]) if (name.length) &#123; args[name] = value; &#125; &#125; return args&#125;]]></content>
    </entry>

    
  
  
</search>
